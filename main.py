import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import sqlalchemy
from sqlalchemy.orm import sessionmaker
from models import create_tables, Word, User, UserWord

DNS = "postgresql://postgres:25022004HERSOSI1725@localhost:5432/tgbot"
engine = sqlalchemy.create_engine(DNS)
Session = sessionmaker(bind=engine)
session = Session()
create_tables(engine)


def users(engine):
    session = (sessionmaker(bind=engine))()
    users = session.query(User).all()
    users = [i.user_id for i in users]
    session.close()
    return users


def add_user(engine, user_id):
    session = (sessionmaker(bind=engine))()
    session.add(User(user_id=user_id))
    session.commit()
    session.close()


def get_words(engine, user_id):
    session = (sessionmaker(bind=engine))()
    words = session.query(UserWord.word, UserWord.translate) \
            .join(User, User.id == UserWord.user_id) \
            .filter(User.name == user_id).all()

    words_all = session.query(Word.word, Word.translate).all()
    result = words_all + words
    session.close()
    return result


def add_word(engine, name, word, translate):
    session = (sessionmaker(bind=engine))()
    user_id = session.query(User).filter(User.name == name).first()[0]
    session.add(UserWord(word=word, translate=translate, id_user=user_id))
    session.commit()
    session.close()


def delite_words(engine, name, word):
    session = (sessionmaker(bind=engine))()
    user_id = session.query(User.id).filter(User.name == name).first()[0]
    session.query(UserWord).filter(
    UserWord.user_id == user_id, UserWord.word == word).delete()
    session.commit()
    session.close()


print("Start telegram bot...")

state_storage = StateMemoryStorage()
token_bot = "7181966406:AAEGSJxKWu4x0poGoQjKi5D8BEB6csEaLmQ"
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = users(engine)
print(f"–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {known_users}")
userStep = {}
buttons = []


def show_hint(*lines):
    return "\n".join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print('New user detected, who hasn\'t used "/start" yet')
        return 0


text_welcoming_theuser = """–ü—Ä–∏–≤–µ—Ç üëã
  –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
  –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
  –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
  - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
  - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
  –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è?"""


@bot.message_handler(commands=["cards", "start"])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, text_welcoming_theuser)
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    get_word = random.sample(get_words(engine, cid), 4)
    word = get_word[0]
    target_word = word[0]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = word[1]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = [word for word in get_word[1:]]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.user.id, message.chat.id) as data:
        data["target_word"] = target_word
        data["translate_word"] = translate
        data["other_words"] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.user.id, message.chat.id) as data:
        print("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", message.chat.id, data["target_word"])  # —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î
        delete_word(engine, message.chat.id, data["target_word"])
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.set_state(message.user.id, MyStates.translate_word, message.chat.id)
    print(message.text)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î


@bot.message_handler(func=lambda message: True, content_types=["text"])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    cid = message.chat.id
    if userStep[cid] == 0:
        with bot.retrieve_data(message.user.id, message.chat.id) as data:
            target_word = data["target_word"]
            if text == target_word:
                hint = show_target(data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                next_btn = types.KeyboardButton(Command.NEXT)
                add_word_btn = types.KeyboardButton(Command.ADD_WORD)
                delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
                buttons.extend([next_btn, add_word_btn, delete_word_btn])
                hint = show_hint(*hint_text)
            else:
                for btn in buttons:
                    if btn.text == text:
                        btn.text = text + "‚ùå"
                        break
                hint = show_hint(
                    "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!ü•∫",
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}",
                )
        markup.add(*buttons)
        bot.send_message(message.chat.id, hint, reply_markup=markup)
        create_cards(message)

    elif userStep[cid] == 1:
        with bot.retrieve_data(message.user.id, message.chat.id) as data:
            data["target_word"] = text
            bot.send_message(cid, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
            bot.set_state(message.user.id, MyStates.other_words, message.chat.id)
            userStep[cid] = 2
    elif userStep[cid] == 2:
        with bot.retrieve_data(message.user.id, message.chat.id) as data:
            data["translate_word"] = text
            add_word(engine, cid, data["target_word"], data["translate_word"])
            bot.send_message(cid, "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            userStep[cid] = 0
            create_cards(message)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
